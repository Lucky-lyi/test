<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" Inherits="CodeTemplate" TargetLanguage="C#" Description="Generates a very simple business object." %>
<%-- CodeTemplate Language="C#" ResponseEncoding="UTF-8" Inherits="OutputFileCodeTemplate" TargetLanguage="C#" Description="Generates a very simple business object." --%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="ClassNameSpace" Type="System.String" Category="Options" Description="Namespace your class is in. Only used if SingleFileMode is true!" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
namespace <%= this.ClassNameSpace %>.Types
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using <%= this.ClassNameSpace %>.Helper;

	#region <%= GetClassName(SourceTable) %>
	/// <summary>
	/// This object represents the properties of a <%= GetClassName(SourceTable) %>.
	/// </summary>
	public class <%= GetClassName(SourceTable) %>
	{
        public <%= GetClassName(SourceTable) %>() { }
        
		<% foreach (ColumnSchema column in SourceTable.Columns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<%}%>
        public DBOperationAction DBOperation{ get; set; }        //数据库操作 Insert Update Delete
        public List<<%= GetClassName(SourceTable) %>> <%= GetClassName(SourceTable) %>Collections { get; set; }
        
        public int <%= GetClassName(SourceTable) %>InsertUpdateDelete(<%= GetClassName(SourceTable) %> obj)
        {
            SqlParameter[] param = new SqlParameter[] {
            <% for (int i = 0; i < SourceTable.Columns.Count; i++){ %>
                SqlHelper.MakeInParameter("@<%= GetPropertyName(SourceTable.Columns[i])%>", obj.<%= GetPropertyName(SourceTable.Columns[i])%>), 
            <%}%>
                SqlHelper.MakeInParameter("@DBOperationAction", obj.DBOperation)
            };
            
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.connectionString, System.Data.CommandType.StoredProcedure, "usp_<%= GetClassName(SourceTable) %>InsertUpdateDelete", param));
        }
        
        public static SqlDataReader FilterDataToReader(string strWhere)
        {
            return FilterDataToReader(strWhere, "");
        }
        
        public static SqlDataReader FilterDataToReader(string strWhere, string orderBy)
        {
            string selectSQL = "SELECT * FROM [<%= GetClassName(SourceTable) %>]";
            if (!string.IsNullOrEmpty(strWhere))
                selectSQL += strWhere;

            if (!string.IsNullOrEmpty(orderBy))
                selectSQL += orderBy;

            SqlDataReader sdr = SqlHelper.ExecuteReader(SqlHelper.connectionString, System.Data.CommandType.Text, selectSQL);
            return sdr;
        }

        public static SqlDataReader GetDataByKey()
        {
            string selectSQL = "SELECT * FROM [<%= GetClassName(SourceTable) %>] WHERE 1=1 ";
            SqlDataReader sdr = SqlHelper.ExecuteReader(SqlHelper.connectionString, System.Data.CommandType.Text, selectSQL);
            
            return sdr;
        }
        
        <%-- 如果没有主键就不用生成此方法 --%>
        <% if(SourceTable.HasPrimaryKey){ %>
        public static SqlDataReader GetDataByKey(<% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {%><%= GetMemberVariableList(SourceTable.PrimaryKey.MemberColumns[i]) %><% } %> string orderBy)
        {
            string selectSQL = "SELECT * FROM [<%= GetClassName(SourceTable) %>] WHERE 1=1 ";
            
            <% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {%>
            selectSQL += " AND [<%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[i]) %>] = @<%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[i]) %>";
            <% } %>
            
            if (!string.IsNullOrEmpty(orderBy))
                selectSQL += orderBy;
            
            SqlParameter[] param = new SqlParameter[] { 
                <% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
                SqlHelper.MakeInParameter("@<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>", var<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>)<% if( i < SourceTable.PrimaryKey.MemberColumns.Count - 1){ %>, <% } %>
                <% } %>
            };
            SqlDataReader sdr = SqlHelper.ExecuteReader(SqlHelper.connectionString, System.Data.CommandType.Text, selectSQL, param);

            return sdr;
        }
        <% } %>
        
        public void FillData()
        {
            SqlDataReader sdr = GetDataByKey();
            <%= GetClassName(SourceTable) %>Collections = sdr.ToClass<<%= GetClassName(SourceTable) %>>();
        }
        
        <% if(SourceTable.HasPrimaryKey){ %>
        public void FillData(<% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {%><%= GetMemberVariableList(SourceTable.PrimaryKey.MemberColumns[i]) %><% } %> string orderBy)
        {
            SqlDataReader sdr = GetDataByKey(<% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {%>var<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>, <% } %> orderBy);
            <%= GetClassName(SourceTable) %>Collections = sdr.ToClass<<%= GetClassName(SourceTable) %>>();
        }
        <% } %>
	}
	#endregion
}
<%-- OutputFile = string.Format("{0}\\{1}{2}",OutputDirectory , GetClassName(SourceTable), ".cs");  %>
<% System.Diagnostics.Process.Start(OutputDirectory); --%>
<script runat="template">
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("public", column);
}

public string GetMemberVariableList(ColumnSchema column)
{
    string strList = "";
    strList += GetCSharpVariableType(column) + " var" + GetMemberVariableName(column) + ", ";
    
    return strList;
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column);
    if(GetCSharpVariableType(column).ToLower() == "datetime")
        statement += "?";
        
    statement += " " + GetMemberVariableName(column);
	
	statement += " { get; set;}";
	
	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	return propertyName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}
		
public string GetCSharpVariableType(ColumnSchema column)
{
	//if (column.Name.EndsWith("TypeCode")) return column.Name;
	return DbTypeCSharp[column.DataType.ToString()];	
}

public string GetReaderMethod(ColumnSchema column)
{
	return DbDataReader[column.DataType.ToString()];
}

public string GetClassName(TableSchema table)
{
    return table.Name;
}

public string GetSqlDbType(ColumnSchema column)
{
	return SqlNativeSqlDb[column.NativeType.ToString()];
}

public override string GetFileName()
{
	return this.GetClassName(this.SourceTable) + ".cs";
}

/*private string _outputDirectory = @"d:\";
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor)),
 Category("Output"), Description("Output directory.")]
 public string OutputDirectory
 {
        get {return _outputDirectory;}
        set {_outputDirectory= value;}
}*/
</script>