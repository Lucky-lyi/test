<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="" Inherits="" Debug="False" CompilerVersion="v3.5" Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%-- 数据库 --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. GettingStarted - Required" Description="Database that the tables views, and storedprocedures should be based on. IMPORTANT!!! If SourceTables and SourceViews areleft blank, the Entire Database will then be generated." %>
<%@ Property Name="NameSpace" Type="System.String" Default="luckyLib" Optional="False" Category="01. GettingStarted - Required" Description="命名空间" %>
<%-- 注册实体层Entity模板 --%>
<%@ Register Name="TableCRUDTemplate" Template="TableCRUD.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="TypesTemplate" Template="TableSchemaTypes.cst" MergeProperties="Flase" ExcludeProperties=""%>

<script runat="template">
    //解决方案输出路径
    private string Directory = String.Empty;
    
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string OutputDirectory 
    { 
        get
        {
            return Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
            Directory = value;
        } 
    }

    //生成实体Entity类
    private void GenerateEntityClasses()
    {
        TableCRUDTemplate Template = new TableCRUDTemplate();
        TypesTemplate typeTemplate = new TypesTemplate();
        foreach(TableSchema table in this.SourceDatabase.Tables)
        {
            string SqlDirectory = string.Format("{0}\\SQL\\{1}_USP_{2}.SQL", OutputDirectory, DateTime.Now.ToString("yyyyMMdd"), table.Name);
            //设置子模板文件的属性
            Template.SetProperty("SourceTable",table);
            //文件输出
            Template.RenderToFile(SqlDirectory, true);
            Debug.WriteLine(SqlDirectory +" 创建成功.");
            
            string TypesDirectory = string.Format("{0}\\Types\\{1}.cs", OutputDirectory, table.Name);
            typeTemplate.SetProperty("SourceTable", table);
            typeTemplate.SetProperty("ClassNameSpace", this.NameSpace);
            typeTemplate.RenderToFile(TypesDirectory, true);
            Debug.WriteLine(TypesDirectory +" 创建成功.");
        }
    }
</script>

<%
//创建实体层Entity类
this.GenerateEntityClasses();
Debug.WriteLine("OK");
//打开输出文件夹
System.Diagnostics.Process.Start(OutputDirectory);
%>