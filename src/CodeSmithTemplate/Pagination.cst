<%@ CodeTemplate Language="C#" TargetLanguage="Html" Src="" Inherits="" ResponseEncoding="UTF-8" Debug="False" CompilerVersion="v3.5" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="PageCount" Type="System.Int32" Default="10" Category="Params" Description="分页记录数" %>
<%@ Property Name="EditURL" Type="System.String" Default="/manage/add.aspx" Optional="False" Category="Params" Description="修改链接" %>
<%@ Property Name="PaginationCSS" Type="System.String" Default="/Scripts/pagination.css" Category="Params" Description="分页CSS" %>
<%@ Property Name="PaginationJS" Type="System.String" Default="/Scripts/jquery.pagination.js" Category="Params" Description="分页JS" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
<%
int NonKeyCount = SourceTable.NonPrimaryKeyColumns.Count;
int PriKeyCount = SourceTable.PrimaryKey.MemberColumns.Count;

string PriKeyStr = "";
string PriKeyQryStr = "";
for(int i = 0; i < PriKeyCount; i++)
{
    PriKeyQryStr += "\"" + GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]) + "\".GetQueryString()," ;
}
PriKeyQryStr = PriKeyQryStr.TrimEnd(',');
%>
<!--分页的后台代码片段-->
using System.Web.Script.Serialization;
using luckyLib.Types;
using luckyLib.Helper;
using luckyLib;

protected string data;
private JavaScriptSerializer jss = new JavaScriptSerializer();

protected void Page_Load(object sender, EventArgs e)
{
    if (!Page.IsPostBack)
    {
        if ("action".GetQueryString() == "del")
        {
            <% =GetClassName(SourceTable) %> obj = <% =GetClassName(SourceTable) %>.GetDataByKey(<%=PriKeyQryStr%>).ToList<<% =GetClassName(SourceTable) %>>().FirstOrDefault();
            if(obj !=null)
            {
                obj.DBOperation = DBOperationAction.DELETE;
                obj.<% =GetClassName(SourceTable) %>InsertUpdateDelete(obj);
            }
        }
        
        GenerateData();
    }
}

private void GenerateData()
{
    List<<% =GetClassName(SourceTable) %>> obj = <% =GetClassName(SourceTable) %>.GetDataByKey().ToClass<<% =GetClassName(SourceTable) %>>();
    data = jss.Serialize(new {data = obj });
}


<!--分页的页面代码片段-->

<link href="<% =PaginationCSS %>" rel="stylesheet" type="text/css" />
<script src="<% =PaginationJS %>" type="text/javascript"></script>

<script type="text/javascript">
    eval(data = <%%=data%>);
    var items_per_page = <% =PageCount %>;

    function pageselectCallback(page_index, jq) {
        var max_elem = Math.min((page_index + 1) * items_per_page, data.data.length);
        var newcontent = '';
        $('#searchresult .trdata').empty();

        // Iterate through a selection of the content and build an HTML string
        for (var i = page_index * items_per_page; i < max_elem; i++) {
            var obj = data.data[i];
            newcontent += '<tr class="trdata">';
            newcontent += '<td class="alignc"><a onclick="return confirm(\'你确定要删除此记录吗?\');" href="?action=del<% for (int i = 0; i < PriKeyCount; i++){%>&<%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%>=' + obj.<%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%> + '<%} %>">删除</a></td>';
            newcontent += '<td class="alignc"><a href="<% =EditURL %>?action=modify<% for (int i = 0; i < PriKeyCount; i++){%>&<%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%>=' + obj.<%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%> + '<%} %>">修改</a></td>';
            <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
            newcontent += '<td>' + obj.<%= GetPropertyName(SourceTable.Columns[i])%> + '</td>';
            <%}%>
            newcontent += '</tr>';
        }

        // Replace old content with new content
        $('#searchresult').append(newcontent);
        // Prevent click event propagation
        return false;
    }

    $(document).ready(function () {
        $("#Pagination").pagination(data.data.length, {
            callback: pageselectCallback,
            items_per_page: items_per_page // Show only one item per page
        });

        pageselectCallback(0, null);
    });
</script>
<table id="searchresult" cellspacing="0">
    <tr>
        <th>删除</th>
        <th>修改</th>
        <% for (int i = 0; i < SourceTable.Columns.Count; i++) {%>
        <th><%= GetPropertyName(SourceTable.Columns[i])%></th>
        <%}%>
    </tr>
</table>
<div id="Pagination" style="padding-left:15px;"></div>

<script runat="template">
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("public", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	statement += " { get; set;}";
	
	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	return propertyName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
    
	return propertyName;
}

public string GetPropertySize(ColumnSchema column)
{
    string propertySize = "";
    switch(GetSqlDbType(column).ToLower())
    {
        case "nvarchar":
        case "nchar":
        case "char":
        case "varchar":
            if(column.Size != -1)
                propertySize += "(" + column.Size + ")";
            else
                propertySize += "(MAX)";
            break;
        default:
            break;
    }
    
    return propertySize;
}

public string GetPropertyDefaultValue(ColumnSchema column)
{
	string DefaultValue = "''";
    switch (GetSqlDbType(column).ToLower())
    {
        case "int":
        case "tinyint":
        case "bigint":
        case "bit":
        case "decimal":
        case "float":
        case "money":
        case "smallint":
            return "0";
        case "date":
        case "datetime":
            return "NULL";
        case "nchar":
        case "nvarchar":
            return "N''";
        default:
            break;
    }
	
	return DefaultValue;
}
        
public string GetCSharpVariableType(ColumnSchema column)
{
	//if (column.Name.EndsWith("TypeCode")) return column.Name;
	return DbTypeCSharp[column.DataType.ToString()];	
}

public string GetReaderMethod(ColumnSchema column)
{
	return DbDataReader[column.DataType.ToString()];
}

public string GetClassName(TableSchema table)
{
    return table.Name;
}

public string GetSqlDbType(ColumnSchema column)
{
	return SqlNativeSqlDb[column.NativeType.ToString()];
}
</script>